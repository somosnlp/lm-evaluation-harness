# ruff: noqa: E731, E741
"""
Script to generate task YAMLs for the AmericasNLP-MT dataset.
Based on `tasks/translation/utils.py`.
"""

import argparse
import itertools

import yaml
from langcodes import Language

# utils
flatten = lambda l: list(itertools.chain(*l))

# constants
LANGUAGES_OF_INTEREST = [
    "grn_Latn",  # GuaranÃ­
    "que_Latn",  # Quechua
    "aym_Latn",  # Aimara
    "nhn_Latn",  # Nahuatl
]
MAIN_LANG = "spa_Latn"  # Spanish
LANGUAGE_PAIRS = [(a, MAIN_LANG) for a in LANGUAGES_OF_INTEREST]

# auxiliary functions

code_to_language_name = lambda code: Language.make(
    language=Language.get(code)["language"]
).display_name()
code_to_short_name = lambda code: Language.get(code)["language"]
jinja_var = (
    lambda s: "{{" + s + "}}"
)  # wrapper to avoid having to escape { } in format strings


def doc_to_text(src: str, tgt: str) -> str:
    src_name, tgt_name = map(code_to_language_name, [src, tgt])

    return f"""\
Frase en {src_name}: {jinja_var('sentence_' + src)}
Frase en {tgt_name}:"""


def doc_to_target(tgt: str) -> str:
    return f"{jinja_var('sentence_' + tgt)}"


# main function
def gen_lang_yamls(output_dir: str, overwrite: bool) -> None:
    """
    Generate a YAML file for each translation direction.
    """

    err = []
    for src, tgt in LANGUAGE_PAIRS:
        # do both translation directions for each lang pair
        for src, tgt in [(src, tgt), (tgt, src)]:
            lang_pair_name = f"{code_to_short_name(src)}-{code_to_short_name(tgt)}"
            yaml_file_name = f"americasnlp-mt_{lang_pair_name}.yaml"

            try:
                with open(
                    f"{output_dir}/{yaml_file_name}",
                    "w" if overwrite else "x",
                    encoding="utf-8",
                ) as outfile:
                    print(f"Creating {yaml_file_name}...")
                    outfile.write(
                        "# File generated by `create_yamls_americasnlp_mt.py`\n"
                    )
                    yaml.dump(
                        {
                            "include": "_americasnlp_mt_common_yaml",
                            "task": f"americasnlp-mt_{lang_pair_name}",
                            "doc_to_text": doc_to_text(src, tgt),
                            "doc_to_target": doc_to_target(tgt),
                        },
                        outfile,
                        sort_keys=False,
                    )

            except FileExistsError:
                err.append(yaml_file_name)

    if len(err) > 0:
        raise FileExistsError(
            "Files were not created because they already exist:"
            f" {', '.join(err)}"
            "\nUse flag --overwrite to overwrite them."
        )


def main() -> None:
    parser = argparse.ArgumentParser()
    parser.add_argument(
        "--overwrite",
        default=False,
        action="store_true",
        help="Overwrite files if they already exist",
    )
    args = parser.parse_args()

    output_dir = "lm_eval/tasks/americasnlp_mt"

    gen_lang_yamls(output_dir=output_dir, overwrite=args.overwrite)


if __name__ == "__main__":
    main()
